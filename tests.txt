CalculatorButtons. test.jsx ------------------------------------

import React from 'react';
import renderer from 'react-test-renderer';
import { render, fireEvent } from '@testing-library/react';
import CalculatorButtons from '../../components/CalculatorButtons';

test('renders CalculatorButtons component Correctly', () => {
    const tree = renderer.create(<CalculatorButtons handleClickedButton={() => {}} />).toJSON();
    expect(tree).toMatchSnapshot();
});
  
test('handles button click correctly', () => {
    const handleClickedButton = jest.fn();
    const { getByText } = render(<CalculatorButtons handleClickedButton={handleClickedButton} />);
  
    const button = getByText('AC'); // Simulate clicking the 'AC' button
    fireEvent.click(button);
  
    expect(handleClickedButton).toHaveBeenCalledWith('AC'); // Assert that the handleClickedButton function was called with the expected button label
  });



---------------calculator.test.jsx


import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';

import Calculator from '../../components/Calculator';

describe('Calculator', () => {
  test('renders correctly', () => {
    const { container } = render(<Calculator />);
    expect(container).toMatchSnapshot();
  });

  test('displays correct value on button click', () => {
    const { getByRole, getByText } = render(<Calculator />);
    const displayElement = getByRole('textbox');

    // Simulate button clicks and assert display value updates accordingly
    fireEvent.click(getByText('1'));
    expect(displayElement).toHaveDisplayValue('1');

    fireEvent.click(getByText('+'));
    expect(displayElement).toHaveDisplayValue('1');

    fireEvent.click(getByText('5'));
    expect(displayElement).toHaveDisplayValue('5');

    fireEvent.click(getByText('='));
    expect(displayElement).toHaveDisplayValue('6');
  });
});





--------------------------displayQuote.test.jsx

import React from 'react';
import { render} from '@testing-library/react';
import DisplayQuote from '../../components/displayQuote';

test('renders loader when isLoading is true', () => {
  const { container } = render(<DisplayQuote />);
  expect(container).toMatchSnapshot();
});

test('renders error message when error is not null', () => {
    const error = 'Failed To Load Quote';
    const { container } = render(<DisplayQuote error={error} />);
    expect(container).toMatchSnapshot();
  });

  test('renders quote and author when quote is not null', () => {
    const quote = [{ quote: 'Test Quote', author: 'Test Author' }];
    const { container } = render(<DisplayQuote quote={quote} />);
    expect(container).toMatchSnapshot();
  });

  test('renders "No Quote Found" when quote is null', () => {
    const { container } = render(<DisplayQuote quote={null} />);
    expect(container).toMatchSnapshot();
  });